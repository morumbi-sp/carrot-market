generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Token           Token[]
  products        Product[]
  favs            Fav[]
  posts           Post[]
  answers         Answer[]
  wonderings      Wondering[]
  writtenReviews  Review[]    @relation("writtenReviews")
  receivedReviews Review[]    @relation("receivedReviews")
  sales           Sale[]
  purchases       Purchase[]
  streams         Stream[]
  messages        Message[]
  chat            Chat[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  userId      Int
  image       String
  name        String
  price       Int
  description String     @db.MediumText
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favs        Fav[]
  sales       Sale[]
  purchases   Purchase[]
  chat        Chat[]

  @@index([userId])
}

model Post {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updateAt   DateTime    @updatedAt
  userId     Int
  question   String      @db.MediumText
  latitude   Float?
  longitude  Float?
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers    Answer[]
  wonderings Wondering[]

  @@index([userId])
}

model Answer {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  userId     Int
  postId     Int
  answerText String   @db.MediumText
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
  createdById  Int
  createdForId Int
  reviewText   String   @db.MediumText
  score        Int
  createdBy    User     @relation("writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdFor   User     @relation("receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)

  @@index([createdById])
  @@index([createdForId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Stream {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  price       Int
  description String    @db.MediumText
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@index([userId])
}

model Message {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messageText String   @db.MediumText
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stream      Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  userId      Int
  streamId    Int

  @@index([userId])
  @@index([streamId])
}

model Chat {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messageText String   @db.MediumText
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      Int
  productId   Int
  buyerId     Int

  @@index([userId])
  @@index([productId])
}
